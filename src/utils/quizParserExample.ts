/**
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Quiz Parser Functions ‡πÉ‡∏´‡∏°‡πà
 * ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Round-Robin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Template ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
 */

import {
  convertToSpecificQuizType,
  convertToCustomMixedQuiz,
  detectQuizTypeFromTemplate,
  parseMixedQuizCounts,
  type SimpleQuestion
} from './quizParser'

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
const sampleQuestions: SimpleQuestion[] = [
  {
    question: "What is photosynthesis?",
    answer: "The process by which plants convert sunlight into energy"
  },
  {
    question: "What is the chemical formula for water?",
    answer: "H2O"
  },
  {
    question: "What is the capital of Thailand?",
    answer: "Bangkok"
  }
]

// ===== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: Multiple Choice Quiz Template =====
console.log('üéØ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: Multiple Choice Quiz (‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Round-Robin)')

// ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏î‡∏¥‡∏°: 1 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‚Üí ‡πÑ‡∏î‡πâ 3 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (multiple-choice, true-false, open-ended)
// ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡∏°‡πà: ‡πÉ‡∏ä‡πâ convertToSpecificQuizType
const multipleChoiceQuiz = convertToSpecificQuizType(
  sampleQuestions.slice(0, 1), // 1 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
  'multiple-choice',
  { language: 'th' }
)

console.log('‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (1 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°):')
multipleChoiceQuiz.forEach(q => {
  console.log(`   ${q.id}. Type: ${q.type}, Question: ${q.question}`)
})

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö 5 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
const multipleChoiceQuiz5 = convertToSpecificQuizType(
  Array(5).fill(sampleQuestions[0]), // 5 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
  'multiple-choice',
  { language: 'th' }
)

console.log('\n‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (5 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°):')
multipleChoiceQuiz5.forEach(q => {
  console.log(`   ${q.id}. Type: ${q.type}`)
})

// ===== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: Mixed Format Quiz Template =====
console.log('\nüé® ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: Mixed Format Quiz (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)')

const mixedPrompt = "Create a quiz with 3 multiple-choice, 2 true/false, and 1 short-answer questions"
const counts = parseMixedQuizCounts(mixedPrompt)

console.log('üìä Parsed counts:', counts)

const customMixedQuiz = convertToCustomMixedQuiz(
  Array(10).fill(sampleQuestions[0]), // 10 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
  counts,
  { language: 'th' }
)

console.log('‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Mixed Quiz:')
customMixedQuiz.forEach(q => {
  console.log(`   ${q.id}. Type: ${q.type}`)
})

// ===== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3: Template Detection =====
console.log('\nüîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3: Template Detection')

const templates = [
  { id: 'multiple-choice', prompt: 'Generate 10 multiple-choice questions' },
  { id: 'mixed-format', prompt: 'Create 5 multiple-choice, 3 true/false, 2 short-answer' },
  { id: 'short-answer', prompt: 'Generate short answer questions' },
  { id: 'unknown', prompt: 'Create some quiz questions' }
]

templates.forEach(template => {
  const detection = detectQuizTypeFromTemplate(template.id, template.prompt)
  console.log(`üìù Template: ${template.id}`)
  console.log(`   ‚Üí Quiz Type: ${detection.quizType}`)
  console.log(`   ‚Üí Recommended Types: ${detection.recommendedTypes.join(', ')}`)
})

// ===== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô InteractiveQuiz =====
console.log('\nüöÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô InteractiveQuiz')

const simulateQuizGeneration = (templateId: string, questionCount: number) => {
  console.log(`\nüéÆ Simulating: ${templateId} with ${questionCount} questions`)

  const detection = detectQuizTypeFromTemplate(templateId)
  console.log(`   Detected: ${detection.quizType} type`)

  const mockQuestions = Array(questionCount).fill(sampleQuestions[0])

  if (detection.quizType === 'single' && detection.recommendedTypes.length === 1) {
    const result = convertToSpecificQuizType(mockQuestions, detection.recommendedTypes[0])
    console.log(`   ‚úÖ Generated ${result.length} ${detection.recommendedTypes[0]} questions`)
    return result
  } else {
    console.log(`   ‚ö†Ô∏è Would use mixed format with types: ${detection.recommendedTypes.join(', ')}`)
    return []
  }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö Template ‡∏ï‡πà‡∏≤‡∏á‡πÜ
simulateQuizGeneration('multiple-choice', 1)  // ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ 1 multiple-choice
simulateQuizGeneration('multiple-choice', 5)  // ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ 5 multiple-choice
simulateQuizGeneration('short-answer', 3)     // ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ 3 open-ended
simulateQuizGeneration('mixed-format', 6)     // ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ mixed format

export {
  convertToSpecificQuizType,
  convertToCustomMixedQuiz,
  detectQuizTypeFromTemplate,
  parseMixedQuizCounts
}
