{
  "examples": {
    "note_example": {
      "type": "note",
      "metadata": {
        "title": "React Hooks ที่สำคัญ",
        "subject": "Web Development",
        "difficulty": "intermediate",
        "estimatedReadTime": "10 minutes",
        "tags": [ "React", "Hooks", "JavaScript", "Frontend" ],
        "language": "th",
        "createdAt": "2024-01-15T10:30:00Z"
      },
      "content": {
        "topic": "React Hooks ที่สำคัญ",
        "summary": "บทสรุปเกี่ยวกับ React Hooks ที่นักพัฒนาควรรู้",
        "sections": [
          {
            "id": 1,
            "title": "useState Hook",
            "level": 2,
            "content": [
              "useState เป็น hook ที่ใช้สำหรับการจัดการ state ใน functional component",
              "Syntax: const [state, setState] = useState(initialValue)",
              "ใช้งานง่ายและมีประสิทธิภาพสูง"
            ],
            "examples": [ { "title": "Basic Usage", "code": "const [count, setCount] = useState(0);", "language": "javascript" } ],
            "keyPoints": [
              "เก็บ state ใน functional component",
              "Re-render component เมื่อ state เปลี่ยน",
              "สามารถใช้ได้หลาย state ในหนึ่ง component"
            ]
          },
          {
            "id": 2,
            "title": "useEffect Hook",
            "level": 2,
            "content": [
              "useEffect ใช้สำหรับ side effects เช่น API calls, subscriptions",
              "ทำงานหลังจาก render เสร็จแล้ว",
              "สามารถ cleanup resources ได้"
            ],
            "examples": [ { "title": "Data Fetching", "code": "useEffect(() => {\n  fetchData();\n}, []);", "language": "javascript" } ],
            "keyPoints": [
              "จัดการ side effects",
              "Dependency array ควบคุมการ re-run",
              "Cleanup function ป้องกัน memory leaks"
            ]
          }
        ],
        "conclusion": "React Hooks ช่วยให้เขียน functional component ที่มีประสิทธิภาพและอ่านง่ายขึ้น",
        "references": [ { "title": "React Official Documentation", "url": "https://reactjs.org/docs/hooks-intro.html" } ]
      }
    },
    "quiz_example": {
      "type": "quiz",
      "metadata": {
        "title": "React Hooks Knowledge Test",
        "subject": "Web Development",
        "difficulty": "intermediate",
        "estimatedTime": "15 minutes",
        "totalQuestions": 3,
        "passingScore": 70,
        "tags": [ "React", "Hooks", "Assessment" ],
        "language": "th",
        "createdAt": "2024-01-15T10:30:00Z"
      },
      "content": {
        "instructions": "ตอบคำถามเกี่ยวกับ React Hooks ให้ครบทุกข้อ",
        "questions": [
          {
            "id": 1,
            "type": "multiple-choice",
            "question": "useState Hook ใช้สำหรับอะไร?",
            "points": 10,
            "options": [
              { "id": "A", "text": "จัดการ side effects", "correct": false },
              { "id": "B", "text": "จัดการ state ใน functional component", "correct": true },
              { "id": "C", "text": "เชื่อมต่อกับ API", "correct": false },
              { "id": "D", "text": "จัดการ routing", "correct": false }
            ],
            "explanation": "useState เป็น hook ที่ใช้สำหรับการจัดการ state ใน functional component",
            "hints": [
              "คิดถึงการเก็บข้อมูลใน component",
              "Hook นี้จะ return array 2 ตัว"
            ]
          },
          {
            "id": 2,
            "type": "true-false",
            "question": "useEffect จะทำงานก่อน component render",
            "points": 10,
            "answer": false,
            "explanation": "useEffect จะทำงานหลังจาก component render เสร็จแล้ว",
            "hints": [ "คิดถึงลำดับการทำงานของ component lifecycle" ]
          },
          {
            "id": 3,
            "type": "short-answer",
            "question": "เขียน syntax ของ useState hook ที่มี initial value เป็น 0",
            "points": 15,
            "sampleAnswer": "const [count, setCount] = useState(0);",
            "keywords": [ "useState", "0", "const", "setCount", "count" ],
            "validation": { "minLength": 10, "mustInclude": [ "useState", "0" ] }
          }
        ],
        "feedback": {
          "excellent": {
            "message": "ยอดเยี่ยม! คุณเข้าใจ React Hooks เป็นอย่างดี",
            "minScore": 90
          },
          "good": {
            "message": "ดีมาก! คุณมีความเข้าใจ React Hooks ในระดับดี",
            "minScore": 70
          },
          "needsImprovement": {
            "message": "ควรศึกษา React Hooks เพิ่มเติม เพื่อความเข้าใจที่ดีขึ้น",
            "minScore": 0
          }
        }
      }
    },
    "flashcard_example": {
      "type": "flashcard",
      "metadata": {
        "title": "React Hooks Flashcards",
        "subject": "Web Development",
        "difficulty": "intermediate",
        "estimatedTime": "20 minutes",
        "totalCards": 4,
        "tags": [ "React", "Hooks", "Memorization" ],
        "language": "th",
        "createdAt": "2024-01-15T10:30:00Z"
      },
      "content": {
        "description": "ชุดการ์ดสำหรับจำ React Hooks ที่สำคัญ",
        "categories": [
          {
            "id": "basic-hooks",
            "name": "Basic Hooks",
            "description": "Hooks พื้นฐานที่ใช้บ่อย",
            "color": "#3B82F6"
          }
        ],
        "cards": [
          {
            "id": 1,
            "categoryId": "basic-hooks",
            "difficulty": "easy",
            "front": { "text": "useState Hook", "type": "text", "additionalInfo": "React Hook พื้นฐาน" },
            "back": {
              "text": "Hook ที่ใช้สำหรับจัดการ state ใน functional component",
              "type": "text",
              "details": [
                "Syntax: const [state, setState] = useState(initialValue)",
                "Return array ที่มี 2 elements: current state และ setter function",
                "เมื่อ state เปลี่ยน component จะ re-render"
              ],
              "example": {
                "title": "ตัวอย่างการใช้งาน",
                "code": "const [count, setCount] = useState(0);",
                "language": "javascript"
              }
            },
            "tags": [ "state", "functional-component", "react" ],
            "studyNotes": "จำได้ว่า useState return array ไม่ใช่ object"
          },
          {
            "id": 2,
            "categoryId": "basic-hooks",
            "difficulty": "medium",
            "front": { "text": "useEffect Hook", "type": "text", "additionalInfo": "Side Effects Management" },
            "back": {
              "text": "Hook ที่ใช้สำหรับจัดการ side effects เช่น API calls, subscriptions",
              "type": "text",
              "details": [
                "ทำงานหลังจาก render เสร็จ",
                "มี dependency array เพื่อควบคุมการ re-run",
                "สามารถ return cleanup function ได้"
              ],
              "example": {
                "title": "ตัวอย่างการ fetch data",
                "code": "useEffect(() => {\n  fetchData();\n  return () => cleanup();\n}, [dependency]);",
                "language": "javascript"
              }
            },
            "tags": [ "side-effects", "lifecycle", "react" ],
            "studyNotes": "dependency array ว่าง [] = ทำงานครั้งเดียว"
          }
        ],
        "studyModes": [
          {
            "id": "learn",
            "name": "Learn Mode",
            "description": "เรียนรู้ทีละใบ พร้อมดูคำตอบได้ทันที"
          },
          {
            "id": "test",
            "name": "Test Mode",
            "description": "ทดสอบความจำ ไม่สามารถดูคำตอบได้ทันที"
          }
        ]
      }
    },
    "summary_example": {
      "type": "summary",
      "metadata": {
        "title": "React Hooks Summary",
        "subject": "Web Development",
        "difficulty": "intermediate",
        "estimatedReadTime": "5 minutes",
        "tags": [ "React", "Hooks", "Summary" ],
        "language": "th",
        "createdAt": "2024-01-15T10:30:00Z"
      },
      "content": {
        "topic": "สรุป React Hooks ที่สำคัญ",
        "overview": "React Hooks เป็นฟีเจอร์ที่ช่วยให้เราสามารถใช้ state และ lifecycle features ใน functional components ได้",
        "keyPoints": [
          {
            "id": 1,
            "title": "useState",
            "description": "จัดการ state ใน functional component",
            "importance": "high",
            "icon": "💾"
          },
          {
            "id": 2,
            "title": "useEffect",
            "description": "จัดการ side effects และ lifecycle",
            "importance": "high",
            "icon": "⚡"
          },
          {
            "id": 3,
            "title": "useContext",
            "description": "เข้าถึง context values",
            "importance": "medium",
            "icon": "🌐"
          }
        ],
        "quickFacts": [
          "Hooks ต้องเรียกใช้ที่ top level ของ function เท่านั้น",
          "ไม่สามารถเรียกใช้ Hooks ใน loops, conditions, หรือ nested functions",
          "Custom Hooks ต้องเริ่มต้นด้วย 'use'"
        ],
        "conclusion": "React Hooks ปฏิวัตินการเขียน React component ทำให้ functional components มีความสามารถเทียบเท่า class components",
        "nextSteps": [
          "ลองสร้าง custom hooks",
          "เรียนรู้ advanced hooks เช่น useMemo, useCallback",
          "ฝึกใช้ useReducer สำหรับ complex state"
        ]
      }
    }
  },
  "api_response_template": {
    "success": true,
    "message": "Content generated successfully",
    "data": "// One of the above content examples",
    "meta": {
      "requestId": "req_123456",
      "processingTime": "2.5s",
      "tokensUsed": 1500,
      "model": "gpt-4",
      "contentType": "note|quiz|flashcard|summary",
      "generationParams": { "prompt": "User's original prompt", "outputFormat": "note", "language": "th", "difficulty": "intermediate" }
    }
  }
}
