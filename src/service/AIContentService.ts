import AxiosClient from './AxiosClient'

// Data Models
export interface CreateGenerationRequestDTO {
  promptText: string
  outputFormat: string
  additionalContext?: string
  maxRetries?: number
  useTemplate?: boolean
  templateId?: number
}

export interface ApiResponseDTO<T> {
  success: boolean
  message?: string
  data?: T
  errorCode?: string
  timestamp: string
}

export interface GenerationStatusDTO {
  requestId: number
  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled'
  progress: number
  errorMessage?: string
  retryCount: number
  maxRetries: number
  createdAt: string
  startedAt?: string
  completedAt?: string
}

export interface AIContent {
  id: string
  type: 'summary' | 'quiz' | 'flashcard' | 'notes'
  title: string
  content: string
  sourcePrompt: string
  sourceFileUrl?: string
  createdAt: Date
  isShared: boolean
}

export interface AIPromptTemplate {
  id: number
  name: string
  description: string
  promptText: string
  outputFormat: string
  isPublic: boolean
  createdAt: string
  updatedAt: string
}

export interface SaveContentDTO {
  requestId: number
  title: string
  content: string
  outputFormat: string
}

export interface AIGeneratedContent {
  id: number
  title: string
  content: string
  outputFormat: string
  requestId: number
  createdAt: string
  updatedAt: string
}

export interface AIJob {
  id: number
  status: 'pending' | 'processing' | 'completed' | 'failed'
  type: string
  data: Record<string, unknown>
  createdAt: string
  updatedAt?: string
}

export interface AIDraft {
  id: number
  title: string
  content: string
  promptText: string
  outputFormat: string
  status?: string
  createdAt: string
  updatedAt: string
}

class AIContentService {
  private client = AxiosClient

  // Mock data for development
  private mockGenerationRequests: GenerationStatusDTO[] = [
    {
      requestId: 1,
      status: 'completed',
      progress: 100,
      retryCount: 0,
      maxRetries: 3,
      createdAt: new Date().toISOString(),
      startedAt: new Date().toISOString(),
      completedAt: new Date().toISOString()
    }
  ]

  private mockSavedContent: AIGeneratedContent[] = [
    {
      id: 1,
      title: 'Sample Summary',
      content: `# Sample Summary

This is a comprehensive summary of the study material.

## Key Points
- Point 1: Important concept
- Point 2: Critical information
- Point 3: Essential details

## Main Ideas
The main ideas covered in this content include fundamental concepts and advanced topics.

## Important Details
This section contains detailed information that is crucial for understanding the subject matter.

## Conclusion
This summary provides a clear overview of the material for easy review and reference.`,
      outputFormat: 'summary',
      requestId: 1,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    },
    {
      id: 2,
      title: 'Sample Quiz',
      content: `1. What is the primary purpose of this content?
A) Entertainment
B) Education
C) Documentation
D) Communication
Answer: B

2. Which format is best for study materials?
A) Summary
B) Quiz
C) Flashcards
D) All of the above
Answer: D

3. This is a sample quiz question. (True/False)
Answer: True

4. The content is generated by AI. (True/False)
Answer: True

5. Explain the benefits of using AI-generated content for studying.
Answer: AI-generated content provides efficiency, consistency, and personalization in creating educational materials.

6. Describe how different content formats can enhance learning.
Answer: Different formats like summaries, quizzes, and flashcards cater to various learning styles and help reinforce knowledge through different approaches.`,
      outputFormat: 'quiz',
      requestId: 2,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    },
    {
      id: 3,
      title: 'Sample Study Notes',
      content: `# Introduction to AI Content Generation

## What is AI Content Generation?

AI content generation is the process of using artificial intelligence to create educational materials, study guides, and learning resources automatically.

## Key Benefits

### 1. Time Efficiency
- Reduces manual content creation time
- Automates repetitive tasks
- Allows focus on higher-level planning

### 2. Consistency
- Maintains uniform quality across materials
- Ensures consistent formatting and structure
- Reduces human error

### 3. Personalization
- Adapts content to different learning styles
- Creates materials for specific subjects
- Customizes difficulty levels

## Applications in Education

### Study Materials
- Summaries of complex topics
- Practice quizzes and tests
- Flashcard sets for memorization
- Structured study notes

### Content Types
- **Summaries**: Concise overviews of topics
- **Quizzes**: Interactive assessment tools
- **Flashcards**: Memory reinforcement cards
- **Notes**: Detailed study guides

## Best Practices

1. **Review Generated Content**: Always verify accuracy
2. **Customize for Context**: Adapt to specific needs
3. **Combine with Human Input**: Use AI as a tool, not replacement
4. **Iterate and Improve**: Continuously refine the process

## Conclusion

AI content generation represents a powerful tool for educators and students, offering efficiency, consistency, and personalization in creating educational materials.`,
      outputFormat: 'note',
      requestId: 3,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    },
    {
      id: 4,
      title: 'Sample Flashcards',
      content: `Front: What is AI Content Generation?
Back: The process of using artificial intelligence to create educational materials automatically.

Front: What are the main benefits of AI content generation?
Back: Time efficiency, consistency, and personalization.

Front: Name three types of educational content that can be generated.
Back: Summaries, quizzes, and flashcards.

Front: What is the primary advantage of using AI for content creation?
Back: It reduces manual content creation time significantly.

Front: How does AI content generation help with consistency?
Back: It maintains uniform quality and formatting across all materials.

Front: What should you always do with AI-generated content?
Back: Review and verify the accuracy before using it.

Front: What is the best approach to using AI in education?
Back: Use AI as a tool to complement human input, not replace it.

Front: What type of content is best for memorization?
Back: Flashcards are ideal for memory reinforcement.

Front: What format is best for testing knowledge?
Back: Quizzes and interactive assessments.

Front: What should you do to improve AI-generated content?
Back: Iterate and continuously refine the process.`,
      outputFormat: 'flashcard',
      requestId: 4,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }
  ]

  // 1. AI Generation (หลัก)
  async createGenerationRequest(data: CreateGenerationRequestDTO): Promise<number> {
    try {
      const response = await this.client.post('/api/ai/generation/request', data)
      return response.data.data.requestId
    } catch (error) {
      console.warn('Backend not ready, using mock data:', error)
      // Return mock request ID
      return Date.now()
    }
  }

  async startGeneration(requestId: number): Promise<void> {
    try {
      await this.client.post(`/api/ai/generation/${requestId}/generate`)
    } catch (error) {
      console.warn('Backend not ready, simulating generation:', error)
      // Simulate successful start
      return Promise.resolve()
    }
  }

  async getGenerationStatus(requestId: number): Promise<GenerationStatusDTO> {
    try {
      const response = await this.client.get(`/api/ai/generation/${requestId}/status`)
      return response.data.data
    } catch (error) {
      console.warn('Backend not ready, using mock status:', error)
      // Return mock status
      return {
        requestId,
        status: 'completed',
        progress: 100,
        retryCount: 0,
        maxRetries: 3,
        createdAt: new Date().toISOString(),
        startedAt: new Date().toISOString(),
        completedAt: new Date().toISOString()
      }
    }
  }

  async getGenerationRequests(): Promise<GenerationStatusDTO[]> {
    try {
      const response = await this.client.get('/api/ai/generation/requests')
      return response.data.data
    } catch (error) {
      console.warn('Backend not ready, using mock data:', error)
      return this.mockGenerationRequests
    }
  }

  async cancelGeneration(requestId: number): Promise<void> {
    try {
      await this.client.post(`/api/ai/generation/${requestId}/cancel`)
    } catch (error) {
      console.warn('Backend not ready, simulating cancel:', error)
      // Simulate successful cancel
      return Promise.resolve()
    }
  }

  async retryGeneration(requestId: number): Promise<void> {
    try {
      await this.client.post(`/api/ai/generation/${requestId}/retry`)
    } catch (error) {
      console.warn('Backend not ready, simulating retry:', error)
      // Simulate successful retry
      return Promise.resolve()
    }
  }

  async saveContent(data: SaveContentDTO): Promise<number> {
    try {
      const response = await this.client.post('/api/ai/generation/content/save', data)
      return response.data.data.contentId
    } catch (error) {
      console.warn('Backend not ready, simulating save:', error)
      // Return mock content ID
      return Date.now()
    }
  }

  async getSavedContent(): Promise<AIGeneratedContent[]> {
    try {
      const response = await this.client.get('/api/ai/generation/content')
      return response.data.data
    } catch (error) {
      console.warn('Backend not ready, using mock data:', error)
      console.log('Mock saved content being returned:', this.mockSavedContent)
      return this.mockSavedContent
    }
  }

  async downloadContent(contentId: number): Promise<Blob> {
    try {
      const response = await this.client.get(`/api/ai/generation/content/${contentId}/download`, {
        responseType: 'blob'
      })
      return response.data
    } catch (error) {
      console.warn('Backend not ready, creating mock download:', error)
      // Create mock blob
      const mockContent = 'This is mock downloaded content'
      return new Blob([mockContent], { type: 'text/plain' })
    }
  }

  async deleteContent(contentId: number): Promise<void> {
    try {
      await this.client.delete(`/api/ai/generation/content/${contentId}`)
    } catch (error) {
      console.warn('Backend not ready, simulating delete:', error)
      // Simulate successful delete
      return Promise.resolve()
    }
  }

  // 2. Templates (Mock only since we removed template management)
  async getUserTemplates(): Promise<AIPromptTemplate[]> {
    console.warn('Template management removed, returning empty array')
    return []
  }

  async getPublicTemplates(): Promise<AIPromptTemplate[]> {
    console.warn('Template management removed, returning empty array')
    return []
  }

  async updateTemplate(templateId: number, template: Partial<AIPromptTemplate>): Promise<AIPromptTemplate> {
    console.warn('Template management removed, returning mock template')
    return {
      id: templateId,
      name: 'Mock Template',
      description: 'Mock template',
      promptText: 'Mock prompt',
      outputFormat: 'summary',
      isPublic: false,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }
  }

  async deleteTemplate(templateId: number): Promise<void> {
    console.warn('Template management removed, simulating delete')
    return Promise.resolve()
  }

  // 3. Preview & Stats
  async previewContent(data: CreateGenerationRequestDTO): Promise<string> {
    try {
      const response = await this.client.post('/api/ai/generation/preview', data)
      return response.data.data.preview
    } catch (error) {
      console.warn('Backend not ready, returning mock preview:', error)
      return `This is a mock preview for ${data.outputFormat} content. The actual generation will be more comprehensive and detailed.`
    }
  }

  async getGenerationStats(): Promise<{
    totalGenerations: number
    completedGenerations: number
    failedGenerations: number
    averageGenerationTime: number
  }> {
    try {
      const response = await this.client.get('/api/ai/generation/stats')
      return response.data.data
    } catch (error) {
      console.warn('Backend not ready, returning mock stats:', error)
      return {
        totalGenerations: 5,
        completedGenerations: 4,
        failedGenerations: 1,
        averageGenerationTime: 30
      }
    }
  }

  // 4. AI Jobs & Drafts
  async createAIJob(job: Partial<AIJob>): Promise<AIJob> {
    try {
      const response = await this.client.post('/api/ai/jobs', job)
      return response.data.data
    } catch (error) {
      console.warn('Backend not ready, returning mock job:', error)
      return {
        id: Date.now(),
        type: job.type || 'generation',
        status: 'pending',
        data: job.data || {},
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
    }
  }

  async processAIJob(jobId: number): Promise<void> {
    try {
      await this.client.post(`/api/ai/jobs/${jobId}/process`)
    } catch (error) {
      console.warn('Backend not ready, simulating job processing:', error)
      return Promise.resolve()
    }
  }

  async requestUpload(jobId: number): Promise<string> {
    try {
      const response = await this.client.post(`/api/ai/jobs/${jobId}/request-upload`)
      return response.data.data.uploadUrl
    } catch (error) {
      console.warn('Backend not ready, returning mock upload URL:', error)
      return 'https://mock-upload-url.com/upload'
    }
  }

  async createAIDraft(draft: Partial<AIDraft>): Promise<AIDraft> {
    try {
      const response = await this.client.post('/api/ai/drafts', draft)
      return response.data.data
    } catch (error) {
      console.warn('Backend not ready, returning mock draft:', error)
      return {
        id: Date.now(),
        title: draft.title || 'Mock Draft',
        content: draft.content || 'Mock content',
        promptText: 'Mock prompt',
        outputFormat: 'summary',
        status: 'draft',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
    }
  }
}

export const aiContentService = new AIContentService()
